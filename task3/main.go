package main

import (
	"fmt"
	"os"
)

//	TASK 3
/*
Что выведет программа?

Объяснить внутреннее устройство интерфейсов и их отличие от пустых интерфейсов.
*/

func Foo() error {
	var err *os.PathError = nil
	return err
}

// Интерфейсы реализуют две структуры iface - интерфейс который содержит таблицу(тип и методы для сравнения) и само значение, eface - для пустого интерфейса
// В данном случае err является сам по себе не является nil так как все значения не nil
// Как-то так будет выглядеть error когда мы его возращаем - (type = *os.PathError, value = nil)
// В отличии от iface(который хранит таблицу методов для проверки реализации интерфейса), eface хранит только информацию о типе, ну и само значение. Поэтому проверка методов как у iface, не требуется

// * "В отличии от iface(который хранит таблицу методов для проверки реализации интерфейса)," - кстати, вот таким образом у нас и проявляеться утиная типизация)
func main() {
	err := Foo()
	fmt.Println(err)        // nil
	fmt.Println(err == nil) // false
}
