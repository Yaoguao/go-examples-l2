package main

import "fmt"

//	TASK 6
/*
Что выведет программа?

Объяснить поведение срезов при передаче их в функцию.
*/

func main() {
	//	При объяснении данной программы стоит разобратся как устроен слайс под капотом
	//	Слайс реализует структура которая содержит {указатель на массив(начальный элемент), размер(int), емкость(int)}
	//	В данном случае будет {*int, len: 3, cap: 3}
	var s = []string{"1", "2", "3"}

	modifySlice(s)
	fmt.Println(s) // { 3, 2, 3 }
}

// При передачи в функцию любого аргумента, он будет скопирован , будь он указателем или значением
// Так и передача слайса в функцию, но так как мы копируем лишь ссылку на значение, то и работать будем с ним
func modifySlice(i []string) {
	//	Тут действительно изменен 0 элемент нашего слайса
	i[0] = "3"
	//	А тут происходит возможно неожиданный процесс, когда мы добавляем элемент в слайс у которого емкость(cap) и размер(len)
	//	совпадает, начинается выделение новой памяти в 2 раза больше текущего размера и перекопирование всех значений в новый массив
	//	И возращаемый слайс будет ссылать на абсолютно другой массив, и теперь новый слайс будет выглядеть так: {*int, len: 3, cap: 6}
	i = append(i, "4")
	//	Дальше работать программа будет с другим слайсом
	i[1] = "5"
	i = append(i, "6")
}

//	В дополнение скажу, что выделение нового массива не всегда будет в 2 раза больше, лишь до 1024мб, потом меньше
